// Code generated by MockGen. DO NOT EDIT.
// Source: models/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=models/interfaces.go -destination=mocks/models_interfaces.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	"go.uber.org/mock/gomock"
	entities "market/internal/entities"
	models "market/internal/models"
	reflect "reflect"
)

// MockBalanceManagerInterface is a mock of BalanceManagerInterface interface.
type MockBalanceManagerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockBalanceManagerInterfaceMockRecorder
}

// MockBalanceManagerInterfaceMockRecorder is the mock recorder for MockBalanceManagerInterface.
type MockBalanceManagerInterfaceMockRecorder struct {
	mock *MockBalanceManagerInterface
}

// NewMockBalanceManagerInterface creates a new mock instance.
func NewMockBalanceManagerInterface(ctrl *gomock.Controller) *MockBalanceManagerInterface {
	mock := &MockBalanceManagerInterface{ctrl: ctrl}
	mock.recorder = &MockBalanceManagerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBalanceManagerInterface) EXPECT() *MockBalanceManagerInterfaceMockRecorder {
	return m.recorder
}

// Deposit mocks base method.
func (m *MockBalanceManagerInterface) Deposit(order string, sum float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deposit", order, sum)
	ret0, _ := ret[0].(error)
	return ret0
}

// Deposit indicates an expected call of Deposit.
func (mr *MockBalanceManagerInterfaceMockRecorder) Deposit(order, sum any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deposit", reflect.TypeOf((*MockBalanceManagerInterface)(nil).Deposit), order, sum)
}

// GetBalance mocks base method.
func (m *MockBalanceManagerInterface) GetBalance() *models.CurrentBalance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance")
	ret0, _ := ret[0].(*models.CurrentBalance)
	return ret0
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockBalanceManagerInterfaceMockRecorder) GetBalance() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockBalanceManagerInterface)(nil).GetBalance))
}

// GetWithdrawals mocks base method.
func (m *MockBalanceManagerInterface) GetWithdrawals() []models.Withdrawals {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithdrawals")
	ret0, _ := ret[0].([]models.Withdrawals)
	return ret0
}

// GetWithdrawals indicates an expected call of GetWithdrawals.
func (mr *MockBalanceManagerInterfaceMockRecorder) GetWithdrawals() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithdrawals", reflect.TypeOf((*MockBalanceManagerInterface)(nil).GetWithdrawals))
}

// Withdraw mocks base method.
func (m *MockBalanceManagerInterface) Withdraw(order string, sum float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdraw", order, sum)
	ret0, _ := ret[0].(error)
	return ret0
}

// Withdraw indicates an expected call of Withdraw.
func (mr *MockBalanceManagerInterfaceMockRecorder) Withdraw(order, sum any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdraw", reflect.TypeOf((*MockBalanceManagerInterface)(nil).Withdraw), order, sum)
}

// MockOrderModelInterface is a mock of OrderModelInterface interface.
type MockOrderModelInterface struct {
	ctrl     *gomock.Controller
	recorder *MockOrderModelInterfaceMockRecorder
}

// MockOrderModelInterfaceMockRecorder is the mock recorder for MockOrderModelInterface.
type MockOrderModelInterfaceMockRecorder struct {
	mock *MockOrderModelInterface
}

// NewMockOrderModelInterface creates a new mock instance.
func NewMockOrderModelInterface(ctrl *gomock.Controller) *MockOrderModelInterface {
	mock := &MockOrderModelInterface{ctrl: ctrl}
	mock.recorder = &MockOrderModelInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderModelInterface) EXPECT() *MockOrderModelInterfaceMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockOrderModelInterface) CreateOrder(orderNumber string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", orderNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockOrderModelInterfaceMockRecorder) CreateOrder(orderNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockOrderModelInterface)(nil).CreateOrder), orderNumber)
}

// GetOrders mocks base method.
func (m *MockOrderModelInterface) GetOrders() []entities.OrderEntity {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrders")
	ret0, _ := ret[0].([]entities.OrderEntity)
	return ret0
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockOrderModelInterfaceMockRecorder) GetOrders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockOrderModelInterface)(nil).GetOrders))
}

// GetOrdersByStatus mocks base method.
func (m *MockOrderModelInterface) GetOrdersByStatus(status []string) []entities.OrderEntity {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersByStatus", status)
	ret0, _ := ret[0].([]entities.OrderEntity)
	return ret0
}

// GetOrdersByStatus indicates an expected call of GetOrdersByStatus.
func (mr *MockOrderModelInterfaceMockRecorder) GetOrdersByStatus(status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersByStatus", reflect.TypeOf((*MockOrderModelInterface)(nil).GetOrdersByStatus), status)
}

// MockUserModelInterface is a mock of UserModelInterface interface.
type MockUserModelInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserModelInterfaceMockRecorder
}

// MockUserModelInterfaceMockRecorder is the mock recorder for MockUserModelInterface.
type MockUserModelInterfaceMockRecorder struct {
	mock *MockUserModelInterface
}

// NewMockUserModelInterface creates a new mock instance.
func NewMockUserModelInterface(ctrl *gomock.Controller) *MockUserModelInterface {
	mock := &MockUserModelInterface{ctrl: ctrl}
	mock.recorder = &MockUserModelInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserModelInterface) EXPECT() *MockUserModelInterfaceMockRecorder {
	return m.recorder
}

// Authenticate mocks base method.
func (m *MockUserModelInterface) Authenticate(email, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticate", email, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockUserModelInterfaceMockRecorder) Authenticate(email, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockUserModelInterface)(nil).Authenticate), email, password)
}

// Registration mocks base method.
func (m *MockUserModelInterface) Registration(email, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Registration", email, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// Registration indicates an expected call of Registration.
func (mr *MockUserModelInterfaceMockRecorder) Registration(email, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Registration", reflect.TypeOf((*MockUserModelInterface)(nil).Registration), email, password)
}

// UserExists mocks base method.
func (m *MockUserModelInterface) UserExists(email string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserExists", email)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserExists indicates an expected call of UserExists.
func (mr *MockUserModelInterfaceMockRecorder) UserExists(email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserExists", reflect.TypeOf((*MockUserModelInterface)(nil).UserExists), email)
}

// getUserByEmail mocks base method.
func (m *MockUserModelInterface) getUserByEmail(email string) (*entities.UserEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getUserByEmail", email)
	ret0, _ := ret[0].(*entities.UserEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getUserByEmail indicates an expected call of getUserByEmail.
func (mr *MockUserModelInterfaceMockRecorder) getUserByEmail(email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getUserByEmail", reflect.TypeOf((*MockUserModelInterface)(nil).getUserByEmail), email)
}
